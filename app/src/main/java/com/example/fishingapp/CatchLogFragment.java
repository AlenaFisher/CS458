package com.example.fishingapp;

import android.view.View;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.fragment.app.Fragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;

import java.util.List;

/**
 * @Author Devon Alonzo
 * @date 11-20-2024
 * This is the catch log fragment. It is responsible for all of the actions that happen in the catch log portion of the app
 */
public class CatchLogFragment extends Fragment {

    //declare all instance variables
    ListView simpleList;
    CustomCatchLogAdapter adapter;
    List<Catch> list;
    EditText title;
    EditText length;
    EditText weight;
    EditText baitUsed;
    EditText location;
    ImageButton createLogBtn;
    int userID;
    DatabaseHandler handler;


    /**
     * This is the oncreate view. It is a method generated by android studio
     * @param inflater The LayoutInflater object that can be used to inflate
     * any views in the fragment,
     * @param container If non-null, this is the parent view that the fragment's
     * UI should be attached to.  The fragment should not add the view itself,
     * but this can be used to generate the LayoutParams of the view.
     * @param savedInstanceState If non-null, this fragment is being re-constructed
     * from a previous saved state as given here.
     *
     * @return a view
     */
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_catch_log, container, false);

        //declare database handler and open the database
        handler = new DatabaseHandler(getActivity());
        handler.openDatabase();

        //get the user ID from previous activity
        userID = getArguments().getInt("id");
        System.out.println(userID);

        //initialize the list to put into to the listview
        list = handler.getUserCatches(userID);

        //initialize some of the variables
        createLogBtn = view.findViewById(R.id.createLogBtn);
        simpleList = view.findViewById(R.id.listView);
        adapter = new CustomCatchLogAdapter(list, getActivity().getApplicationContext());
        simpleList.setAdapter(adapter);
        createNewLog(this);
        editOrDeleteLog(this);

        return view;
    }

    /**
     * This method edits or deletes a logged catch
     * @param fragment
     */
    private void editOrDeleteLog(CatchLogFragment fragment){

        //set item click listener to listen for which list item is to be clicked
        simpleList.setOnItemClickListener((parent, view1, position, id) -> {

            //create new custom alert dialog box to a custom layout for editing and deleting
            AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getContext());
            builder.setTitle("Edit or Delete");
            final View customLayout = getLayoutInflater().inflate(R.layout.edit_delete_dialog, null);
            builder.setView(customLayout);

            //this for loop iterates through the linked list to find which catch information to display
            for (int i = 0; i < list.size(); i++) {

                //if i is equal to the position the following happens
                if (position == i) {

                    //store the task in a variable
                    Catch aCatch = list.get(i);

                    //assign instance variables to the the component id's in the "edit_delete_dialog"
                    title = customLayout.findViewById(R.id.titleEdit);
                    length = customLayout.findViewById(R.id.lengthEdit);
                    weight = customLayout.findViewById(R.id.weightEdit);
                    baitUsed = customLayout.findViewById(R.id.baitUsedEdit);
                    location = customLayout.findViewById(R.id.locationEdit);

                    //set the text fields to the current information that is on the catch
                    title.setText(aCatch.getTitle());
                    length.setText(aCatch.getLength());
                    weight.setText(aCatch.getWeight());
                    baitUsed.setText(aCatch.getBaitUsed());
                    location.setText(aCatch.getLocation());

                    //updates all fields that were changed
                    builder.setPositiveButton("Save", (dialog, which) -> {
                        aCatch.setAllItems(convert(title), convert(length), convert(weight), convert(baitUsed), convert(location));
                        handler.openDatabase();
                        handler.updateCatch(aCatch);

                        adapter.notifyDataSetChanged();
                    });

                    //deletes the selected catch
                    builder.setNegativeButton("Delete", (dialog, which) -> {
                        handler.openDatabase();
                        handler.deleteCatch(aCatch.getUnique_ID());

                        list.remove(aCatch);
                        adapter.notifyDataSetChanged();
                    });

                    //show dialog box
                    AlertDialog dialog = builder.create();
                    dialog.show();
                    break;

                }
            }


        });

    }


    /**
     * This method creates a new catch and stores it in the database
     * @param fragment
     */
    private void createNewLog(CatchLogFragment fragment){

        //on click listener for when the plus button is pressed
        createLogBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getContext());
                builder.setTitle("Log Catch");
                final View customLayout = getLayoutInflater().inflate(R.layout.create_log_dialog, null);
                builder.setView(customLayout);

                //connects "Log Catch" button to the following instructions
                builder.setPositiveButton("Log catch", (dialog, which) -> {

                    //set instance variables to the components
                    title = customLayout.findViewById(R.id.title);
                    length = customLayout.findViewById(R.id.length);
                    weight = customLayout.findViewById(R.id.weight);
                    baitUsed = customLayout.findViewById(R.id.baitUsed);
                    location = customLayout.findViewById(R.id.location);
                    Catch fishCatch = new Catch(userID, title.getText().toString(), location.getText().toString(), weight.getText().toString(), baitUsed.getText().toString(), length.getText().toString());
                    handler.openDatabase();
                    handler.insertCatch(fishCatch);

                    list.add(fishCatch);
                    adapter.notifyDataSetChanged();

                });
                builder.setNegativeButton("Cancel", (dialog, which) -> {
                    dialog.dismiss();
                });

                //show alert dialog
                AlertDialog dialog = builder.create();
                dialog.show();

            }
        });


    }

    /**
     * This method converts any edit text data type to a string data type
     * @param text
     * @return a string
     */
    private String convert(EditText text){
        return text.getText().toString();
    }

}
